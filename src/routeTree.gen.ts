/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const SignupLazyImport = createFileRoute('/signup')()
const SigninLazyImport = createFileRoute('/signin')()
const ProfileLazyImport = createFileRoute('/profile')()
const JournalLazyImport = createFileRoute('/journal')()
const EmotionsLazyImport = createFileRoute('/emotions')()
const EmergencyLazyImport = createFileRoute('/emergency')()
const ChatLazyImport = createFileRoute('/chat')()
const BookLazyImport = createFileRoute('/book')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const SignupLazyRoute = SignupLazyImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signup.lazy').then((d) => d.Route))

const SigninLazyRoute = SigninLazyImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signin.lazy').then((d) => d.Route))

const ProfileLazyRoute = ProfileLazyImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/profile.lazy').then((d) => d.Route))

const JournalLazyRoute = JournalLazyImport.update({
  id: '/journal',
  path: '/journal',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/journal.lazy').then((d) => d.Route))

const EmotionsLazyRoute = EmotionsLazyImport.update({
  id: '/emotions',
  path: '/emotions',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/emotions.lazy').then((d) => d.Route))

const EmergencyLazyRoute = EmergencyLazyImport.update({
  id: '/emergency',
  path: '/emergency',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/emergency.lazy').then((d) => d.Route))

const ChatLazyRoute = ChatLazyImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/chat.lazy').then((d) => d.Route))

const BookLazyRoute = BookLazyImport.update({
  id: '/book',
  path: '/book',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/book.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/book': {
      id: '/book'
      path: '/book'
      fullPath: '/book'
      preLoaderRoute: typeof BookLazyImport
      parentRoute: typeof rootRoute
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatLazyImport
      parentRoute: typeof rootRoute
    }
    '/emergency': {
      id: '/emergency'
      path: '/emergency'
      fullPath: '/emergency'
      preLoaderRoute: typeof EmergencyLazyImport
      parentRoute: typeof rootRoute
    }
    '/emotions': {
      id: '/emotions'
      path: '/emotions'
      fullPath: '/emotions'
      preLoaderRoute: typeof EmotionsLazyImport
      parentRoute: typeof rootRoute
    }
    '/journal': {
      id: '/journal'
      path: '/journal'
      fullPath: '/journal'
      preLoaderRoute: typeof JournalLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileLazyImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninLazyImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/book': typeof BookLazyRoute
  '/chat': typeof ChatLazyRoute
  '/emergency': typeof EmergencyLazyRoute
  '/emotions': typeof EmotionsLazyRoute
  '/journal': typeof JournalLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/signin': typeof SigninLazyRoute
  '/signup': typeof SignupLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/book': typeof BookLazyRoute
  '/chat': typeof ChatLazyRoute
  '/emergency': typeof EmergencyLazyRoute
  '/emotions': typeof EmotionsLazyRoute
  '/journal': typeof JournalLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/signin': typeof SigninLazyRoute
  '/signup': typeof SignupLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/book': typeof BookLazyRoute
  '/chat': typeof ChatLazyRoute
  '/emergency': typeof EmergencyLazyRoute
  '/emotions': typeof EmotionsLazyRoute
  '/journal': typeof JournalLazyRoute
  '/profile': typeof ProfileLazyRoute
  '/signin': typeof SigninLazyRoute
  '/signup': typeof SignupLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/book'
    | '/chat'
    | '/emergency'
    | '/emotions'
    | '/journal'
    | '/profile'
    | '/signin'
    | '/signup'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/book'
    | '/chat'
    | '/emergency'
    | '/emotions'
    | '/journal'
    | '/profile'
    | '/signin'
    | '/signup'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/book'
    | '/chat'
    | '/emergency'
    | '/emotions'
    | '/journal'
    | '/profile'
    | '/signin'
    | '/signup'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  BookLazyRoute: typeof BookLazyRoute
  ChatLazyRoute: typeof ChatLazyRoute
  EmergencyLazyRoute: typeof EmergencyLazyRoute
  EmotionsLazyRoute: typeof EmotionsLazyRoute
  JournalLazyRoute: typeof JournalLazyRoute
  ProfileLazyRoute: typeof ProfileLazyRoute
  SigninLazyRoute: typeof SigninLazyRoute
  SignupLazyRoute: typeof SignupLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  BookLazyRoute: BookLazyRoute,
  ChatLazyRoute: ChatLazyRoute,
  EmergencyLazyRoute: EmergencyLazyRoute,
  EmotionsLazyRoute: EmotionsLazyRoute,
  JournalLazyRoute: JournalLazyRoute,
  ProfileLazyRoute: ProfileLazyRoute,
  SigninLazyRoute: SigninLazyRoute,
  SignupLazyRoute: SignupLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/book",
        "/chat",
        "/emergency",
        "/emotions",
        "/journal",
        "/profile",
        "/signin",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/book": {
      "filePath": "book.lazy.tsx"
    },
    "/chat": {
      "filePath": "chat.lazy.tsx"
    },
    "/emergency": {
      "filePath": "emergency.lazy.tsx"
    },
    "/emotions": {
      "filePath": "emotions.lazy.tsx"
    },
    "/journal": {
      "filePath": "journal.lazy.tsx"
    },
    "/profile": {
      "filePath": "profile.lazy.tsx"
    },
    "/signin": {
      "filePath": "signin.lazy.tsx"
    },
    "/signup": {
      "filePath": "signup.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
